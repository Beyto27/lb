import os
import tkinter as tk
from tkinter import simpledialog, messagebox, filedialog
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def generate_pdf(position, kandidat_id, geburtsdatum, nationalitaet, kenntnisse, qualifikationen, beruflicher_werdegang, schulischer_werdegang, ausbildung, sprachen):
    # Speicherort auswählen
    output_pdf_path = filedialog.asksaveasfilename(
        defaultextension=".pdf",
        filetypes=[("PDF files", "*.pdf")],
        title="Speichern unter"
    )
    
    if not output_pdf_path:
        messagebox.showerror("Abbruch", "Der Speicherort wurde nicht ausgewählt.")
        return None

    # PDF-Größe und Canvas
    c = canvas.Canvas(output_pdf_path, pagesize=A4)
    width, height = A4

    # Hilfsfunktionen
    def draw_wrapped_text(c, text, x, y, max_width, line_height):
        words = text.split()
        line = ""
        for word in words:
            if c.stringWidth(line + word, "Helvetica", 10) < max_width:
                line += word + " "
            else:
                c.drawString(x, y, line.strip())
                y -= line_height
                line = word + " "
        c.drawString(x, y, line.strip())
        return y - line_height

    def add_new_page():
        nonlocal y_position
        c.showPage()
        c.setFont("Helvetica", 10)
        y_position = height - 50

    y_position = height - 50

    # Kopfzeile
    c.setFont("Helvetica-Bold", 14)
    c.drawString(100, y_position, "Qualifikationsprofil")
    c.drawString(250, y_position, position)
    y_position -= 30
    c.line(100, y_position, width - 100, y_position)
    y_position -= 40
    # Persönliche Daten
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Persönliche Daten")
    y_position -= 20

    # Tabulator-Einstellungen
    tab_position = 250  # Tabulatorabstand (X-Koordinate)

    # Kandidat ID
    c.setFont("Helvetica-Bold", 10)
    c.drawString(100, y_position, "Kandidat ID")
    c.drawString(tab_position, y_position, kandidat_id)
    y_position -= 15

    # Geburtsdatum
    c.setFont("Helvetica-Bold", 10)
    c.drawString(100, y_position, "Geburtsdatum")
    c.drawString(tab_position, y_position, geburtsdatum)
    y_position -= 15

    # Nationalität
    c.setFont("Helvetica-Bold", 10)
    c.drawString(100, y_position, "Nationalität")
    c.drawString(tab_position, y_position, nationalitaet)
    y_position -= 30

    # Check and new page logic
    def check_and_add_new_page(minimum_y_position=50):
        nonlocal y_position
        if y_position < minimum_y_position:
            add_new_page()

    # Beruflicher Werdegang
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Beruflicher Werdegang")
    y_position -= 20
    check_and_add_new_page()

    for beruf in beruflicher_werdegang:
        c.setFont("Helvetica", 10)
        c.drawString(100, y_position, beruf['datum'])
        c.setFont("Helvetica-Bold", 10)
        c.drawString(250, y_position, beruf['position'])
        y_position -= 15
        c.setFont("Helvetica", 10)
        y_position = draw_wrapped_text(c, f"{beruf['unternehmen']}", 250, y_position, width - 150, 15)
        for taetigkeit in beruf.get('taetigkeiten', []):
            y_position = draw_wrapped_text(c, f"• {taetigkeit}", 250, y_position, width - 300, 15)
        y_position -= 15
        check_and_add_new_page()

    # Schulischer Werdegang
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Schulischer Werdegang")
    y_position -= 20
    check_and_add_new_page()

    for schule in schulischer_werdegang:
        c.setFont("Helvetica", 10)
        c.drawString(100, y_position, schule['datum'])
        c.setFont("Helvetica-Bold", 10)
        c.drawString(250, y_position, schule['fachbereich'])
        y_position -= 15
        c.setFont("Helvetica", 10)
        y_position = draw_wrapped_text(c, f"{schule['staette']}", 250, y_position, width - 150, 15)
        for taetigkeit in schule.get('taetigkeiten', []):
            y_position = draw_wrapped_text(c, f"• {taetigkeit}", 250, y_position, width - 300, 15)
        y_position -= 15
        check_and_add_new_page()

    # Ausbildung
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Ausbildung")
    y_position -= 20
    check_and_add_new_page()

    for ausb in ausbildung:
        c.setFont("Helvetica", 10)
        c.drawString(100, y_position, ausb['datum'])
        c.setFont("Helvetica-Bold", 10)
        c.drawString(250, y_position, ausb['ausbildungsberuf'])
        y_position -= 15
        c.setFont("Helvetica", 10)
        y_position = draw_wrapped_text(c, f"{ausb['unternehmen']}", 250, y_position, width - 150, 15)
        for taetigkeit in ausb.get('taetigkeiten', []):
            y_position = draw_wrapped_text(c, f"• {taetigkeit}", 250, y_position, width - 300, 15)
        y_position -= 15
        check_and_add_new_page()

    # Qualifikationen
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Qualifikationen")
    y_position -= 20
    check_and_add_new_page()

    c.setFont("Helvetica", 10)
    for qualifikation in qualifikationen:
        y_position = draw_wrapped_text(c, f"• {qualifikation}", 100, y_position, width - 150, 15)
        y_position -= 15
        check_and_add_new_page()

    # Kenntnisse
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Kenntnisse")
    y_position -= 20
    check_and_add_new_page()

    c.setFont("Helvetica", 10)
    for kenntnis in kenntnisse:
        y_position = draw_wrapped_text(c, f"• {kenntnis}", 100, y_position, width - 150, 15)
        y_position -= 15
        check_and_add_new_page()

    # Sprachen
    c.setFont("Helvetica-Bold", 12)
    c.drawString(100, y_position, "Sprachen")
    y_position -= 20
    check_and_add_new_page()

    c.setFont("Helvetica", 10)
    for sprache in sprachen:
        y_position = draw_wrapped_text(c, f"{sprache['sprache']}: {sprache['grad']}", 100, y_position, width - 150, 15)
        y_position -= 15
        check_and_add_new_page()

    # PDF speichern
    c.save()
    return output_pdf_path

def open_listbox_window(title):
    """Öffnet ein Fenster mit Listbox zur Eingabe von mehreren Einträgen."""
    window = tk.Toplevel(root)
    window.title(title)
    window.geometry("400x300")
    
    listbox = tk.Listbox(window, height=12, width=40)
    listbox.pack(pady=10)

    entry_field = tk.Entry(window, width=30)
    entry_field.pack(pady=5)

    def add_item():
        item = entry_field.get()
        if item.strip():
            listbox.insert(tk.END, item)
            entry_field.delete(0, tk.END)

    def remove_item():
        selected_items = listbox.curselection()
        for index in selected_items[::-1]:
            listbox.delete(index)

    add_button = tk.Button(window, text="Hinzufügen", command=add_item)
    add_button.pack(side=tk.LEFT, padx=5, pady=10)

    remove_button = tk.Button(window, text="Entfernen", command=remove_item)
    remove_button.pack(side=tk.LEFT, padx=5)

    def save_items():
        items = list(listbox.get(0, tk.END))
        window.destroy()
        window.result = items

    save_button = tk.Button(window, text="Fertig", command=save_items)
    save_button.pack(side=tk.RIGHT, padx=5)

    window.wait_window()
    return getattr(window, 'result', [])

def validate_inputs(position, kandidat_id, geburtsdatum, nationalitaet, kenntnisse, qualifikationen, beruflicher_werdegang, schulischer_werdegang, ausbildung, sprachen):
    """Prüft, ob alle erforderlichen Felder ausgefüllt sind."""
    if not position or not kandidat_id or not geburtsdatum or not nationalitaet:
        return False, "Bitte füllen Sie alle Pflichtfelder aus: Position, Kandidat ID, Geburtsdatum, Nationalität."
    
    if not kenntnisse or not qualifikationen or not beruflicher_werdegang or not schulischer_werdegang or not ausbildung or not sprachen:
        return False, "Bitte stellen Sie sicher, dass alle Abschnitte wie Kenntnisse, Qualifikationen, Berufserfahrung, etc. ausgefüllt sind."
    
    return True, ""

def on_generate_button_click():
    # Eingaben sammeln
    position = simpledialog.askstring("Eingabe", "Position:")
    kandidat_id = simpledialog.askstring("Eingabe", "Kandidat ID:")
    geburtsdatum = simpledialog.askstring("Eingabe", "Geburtsdatum:")
    nationalitaet = simpledialog.askstring("Eingabe", "Nationalität:")

    kenntnisse = open_listbox_window("Kenntnisse eingeben")
    qualifikationen = open_listbox_window("Qualifikationen eingeben")
    
    sprachen = []
    while True:
        sprache = simpledialog.askstring("Sprachkenntnisse", "Sprache:")
        grad = simpledialog.askstring("Sprachkenntnisse", "Grad der Sprachkenntnisse:")
        sprachen.append({"sprache": sprache, "grad": grad})
        more = messagebox.askyesno("Weitere Sprachen", "Möchten Sie eine weitere Sprache hinzufügen?")
        if not more:
            break

    beruflicher_werdegang = []
    while True:
        beruf = {
            "datum": simpledialog.askstring("Berufserfahrung", "Datum Beruflicher Werdegang:"),
            "position": simpledialog.askstring("Berufserfahrung", "Position:"),
            "unternehmen": simpledialog.askstring("Berufserfahrung", "Unternehmensname:"),
            "taetigkeiten": open_listbox_window("Tätigkeiten Berufserfahrung eingeben")
        }
        beruflicher_werdegang.append(beruf)
        more = messagebox.askyesno("Weitere Berufserfahrung", "Möchten Sie weitere berufliche Erfahrungen hinzufügen?")
        if not more:
            break

    schulischer_werdegang = []
    while True:
        schule = {
            "datum": simpledialog.askstring("Schulischer Werdegang", "Datum Schulischer Werdegang:"),
            "fachbereich": simpledialog.askstring("Schulischer Werdegang", "Fachbereich:"),
            "staette": simpledialog.askstring("Schulischer Werdegang", "Stätte:"),
            "taetigkeiten": open_listbox_window("Tätigkeiten Schulischer Werdegang eingeben")
        }
        schulischer_werdegang.append(schule)
        more = messagebox.askyesno("Weitere Schulische Werdegänge", "Möchten Sie einen weiteren schulischen Werdegang hinzufügen?")
        if not more:
            break

    ausbildung = []
    while True:
        ausb = {
            "datum": simpledialog.askstring("Ausbildung", "Datum Ausbildung:"),
            "ausbildungsberuf": simpledialog.askstring("Ausbildung", "Ausbildungsberuf:"),
            "unternehmen": simpledialog.askstring("Ausbildung", "Unternehmen:"),
            "taetigkeiten": open_listbox_window("Tätigkeiten Ausbildung eingeben")
        }
        ausbildung.append(ausb)
        more = messagebox.askyesno("Weitere Ausbildungen", "Möchten Sie eine weitere Ausbildung hinzufügen?")
        if not more:
            break

    # Validierung der Eingaben
    valid, error_message = validate_inputs(position, kandidat_id, geburtsdatum, nationalitaet, kenntnisse, qualifikationen, beruflicher_werdegang, schulischer_werdegang, ausbildung, sprachen)
    if not valid:
        messagebox.showerror("Fehler", error_message)
        return

    pdf_path = generate_pdf(position, kandidat_id, geburtsdatum, nationalitaet, kenntnisse, qualifikationen, beruflicher_werdegang, schulischer_werdegang, ausbildung, sprachen)
    if pdf_path:
        download_button.config(state=tk.NORMAL)
        download_button.pdf_path = pdf_path

def on_download_button_click():
    if hasattr(download_button, 'pdf_path'):
        filepath = download_button.pdf_path
        if os.path.exists(filepath):
            messagebox.showinfo("Download", f"Der Lebenslauf wurde gespeichert.\nSie können ihn hier finden:\n{filepath}")
        else:
            messagebox.showerror("Fehler", "Die PDF-Datei konnte nicht gefunden werden.")
    else:
        messagebox.showerror("Fehler", "Kein Lebenslauf generiert. Bitte generiere zuerst den Lebenslauf.")

root = tk.Tk()
root.title("Lebenslauf Generator")

generate_button = tk.Button(root, text="Lebenslauf Generieren", command=on_generate_button_click)
generate_button.pack(pady=20)

download_button = tk.Button(root, text="Lebenslauf Herunterladen", command=on_download_button_click, state=tk.DISABLED)
download_button.pack(pady=20)

root.mainloop()

